#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Servo.h>      
#include "index.h"

// Usar as credenciais da rede WiFi
const char* ssid = "MEO-9D6BF0";
const char* password = "64252b9218";
// Utilizador 1 ---- Username: admin     Password: admin
const char* http_username = "admin";
const char* http_password = "admin";
// Utilizador 2 ---- Username: admin2    Password: admin2
const char* www_username = "admin2";
const char* www_password = "admin2";

const char* PARAM_INPUT_1 = "state";

const int output = 2;   

// Cria o AsyncWebServer na porta 80
AsyncWebServer server(80);



//Substitui o marcador de posição pela secção de botão na página web
String processor(const String& var)
{
  
  if(var == "BUTTONPLACEHOLDER")
  {
    String buttons ="";
    String outputStateValue = outputState();
    buttons+= "<p><label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"output\" " + outputStateValue + "><span class=\"slider\"></span></label></p>";
    return buttons;
  }
  if (var == "STATE")
  {
    if(digitalRead(output))
    {
      return "OPEN";
    }
    else {
      return "CLOSE";
    }
  }
  return String();
}

String outputState()
{
  if(digitalRead(output))
  {
    return "checked";
  }
  else 
  {
    return "";
  }
  return "";
}

void setup()
{
  // Porta serial para fins de debug
  Serial.begin(115200);

  pinMode(output, OUTPUT);
  digitalWrite(output, HIGH);  // digitalWrite(output, LOW); inverte o botao
      
  // Conecta-se ao Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Imprime na porta Serial o endereço IP local
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
  {
    //----------------------------------------------------------------------- admin entra como 1 e admin2 entra como 0
    Serial.println(request->authenticate(http_username, http_password));    
    //--------------------------------------------------------------------------
    
    if((!request->authenticate(http_username, http_password)) && (!request->authenticate(www_username, www_password)))      
      return request->requestAuthentication();
    request->send_P(200, "text/html", index_html, processor);
  });
    
  server.on("/logout", HTTP_GET, [](AsyncWebServerRequest *request)
  {
    request->send(401);
  });

  server.on("/logged-out", HTTP_GET, [](AsyncWebServerRequest *request)
  {
    request->send_P(200, "text/html", logout_html, processor);
  });

  // Envia uma solicitação GET para <ESP_IP>/update?state=<inputMessage>
  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) 
  {
    String inputMessage;
    String inputParam;
    
    // GET input1 value on <ESP_IP>/update?state=<inputMessage>
    if (request->hasParam(PARAM_INPUT_1)) 
    {
      inputMessage = request->getParam(PARAM_INPUT_1)->value();
      inputParam = PARAM_INPUT_1;
      digitalWrite(output, !inputMessage.toInt());     // digitalWrite(output, inputMessage.toInt()); inverte o botao
    }
    else 
    {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage);
    request->send(200, "text/plain", "OK");
  });
  
  // Inicia o server
  server.begin();
}
  
void loop() 
{
}







***************************  Criar página index.h no arduino IDE clicando ctrl+shift+N e introduzir o seguinte código:  **********************************************









const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Audiowide">
  <title>ESP8266 Web Server to control Servo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}    
    p{color: #ffffff;}
    h2 {font-size: 2.6rem; font-family: "Audiowide", sans-serif; color: #1a781c}
    body {max-width: 600px; margin:0px auto; padding-bottom: 10px;  background-color: #3b3939;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color:#ccc; border-radius: 34px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border-radius: 68px}
    input:checked+.slider {background-color: #2196F3}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
    
    .button {
  border-radius: 4px;
  background-color: #f4511e;
  border: none;
  color: #FFFFFF;
  text-align: center;
  font-size: 28px;
  padding: 20px;
  width: 200px;
  transition: all 0.5s;
  cursor: pointer;
  margin: 5px;
}

.button span {
  cursor: pointer;
  display: inline-block;
  position: relative;
  transition: 0.5s;
}

.button span:after {
  content: '\00bb';
  position: absolute;
  opacity: 0;
  top: 0;
  right: -20px;
  transition: 0.5s;
}

.button:hover span {
  padding-right: 25px;
}

.button:hover span:after {
  opacity: 1;
  right: 0;
}
  </style>
</head>
<body>
  <h2>ESP8266 Web Server</h2>
  <button class="button", onclick="logoutButton()"><span>Logout</span></button> 
  <p><b>Ouput - GPIO 2 - State <span id="state">%STATE%</span></b></p>    
  %BUTTONPLACEHOLDER%
<script>function toggleCheckbox(element)
{
  var xhr = new XMLHttpRequest();
  if(element.checked)
  { 
    xhr.open("GET", "/update?state=1", true); 
    document.getElementById("state").innerHTML = "OPEN";  
  }
  else 
  { 
    xhr.open("GET", "/update?state=0", true); 
    document.getElementById("state").innerHTML = "CLOSE";      
  }
  xhr.send();
}
function logoutButton() 
{
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/logout", true);
  xhr.send();
  setTimeout(function(){ window.open("/logged-out","_self"); }, 1000);
}
</script>
</body>
</html>
)rawliteral";

const char logout_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <p>Logged out or <a href="/">return to homepage</a>.</p>
  <p><strong>Note:</strong> close all web browser tabs to complete the logout process.</p>
</body>
</html>
)rawliteral";
